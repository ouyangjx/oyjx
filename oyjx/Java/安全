XSS攻击：跨站脚本攻击（在页面中嵌入脚本程序，用于盗取账号密码、cookie、下载木马等等） 防范（对用户输入的数据进行HTML转义，一般如<、>、'、"等，子啊使用jstl标签时，可以设置escapeXML="true"进行HTML转义）

CRSF攻击：跨站请求伪造（利用浏览器的cookie，借用用户身份向第三方网站发起恶意请求） 防范（1、将cookie设置成Httponly；2、Session保存用户请求的token，每次请求进行验证（作为参数，因为跨站取不到）（页面隐藏域？或在cookie也没关系吧）；3、通过Referer识别，request.getHeader("Referer");（非绝对安全，浏览器可以设置不携带，以及又的可以篡改））

SQL注入攻击：
（将恶意的sql伪装成请求参数，最后在服务器端执行） 防范（1、预编译语句，如PreparedStatement，并且通过占位符传递参数；2、ORM框架，比如Mybatis用#接收参数，即可防止SQL注入；3、避免密码明文存放；4、处理好异常，避免暴露服务器、数据库等信息）


文件上传漏洞：
    根据魔数确定文件类型；使用像imagemagick这样的针对图片处理的开发工具包，如果要在java环境中使用imagemagick，则还需要按照jmagick，通过jmagick来对imagemagick进行调用。

DDos攻击（分布式拒绝服务攻击）
    SYN Flooad、DNS Query Flood、CC攻击

https加密了为什么抓包还是明文（其实就是抓包软件把自己当做了浏览器（活生生把浏览器给蒙在鼓里））：
https抓包的原理就是抓包程序将服务器返回的证书截获 然后给客户端返回一个它自己的证书 客户端发送的数据抓包程序用自己的证书解密，然后再用截获的证书加密，再发给服务器 所以你在能看到明文。
密文是针对https两端以外其他路径而言，你作为https链接的两端，当然可以看到明文
技术一点来说，TLS协议是在tcp协议之上的，tcp又是基于IP协议的。所以无论如何，你的对端IP地址是肯定无法加密的。
换个角度来看，假如你把对端ip都加密了，路由器怎么办？你的数据根本无法在网络上转发。另外TLS协议也只是把HTTP层的数据加密了，所以也只是无法看到HTTP传输的内容，但是其他协议层的内容还是明文传输的。

    https：
        服务器（私钥（解密请求数据）、公钥（加密响应数据））
        客户端（公钥（加密请求数据）、私钥（解密响应数据））
        客户端的证书（包括公与私吗?）由服务器返回
    抓包：
        即截取了服务器返回的证书，然后给客户端发自己的证书
            这样客户端发的数据自己就有私钥解密了，然后再用服务器返回的公钥加密数据发给服务器

mitmproxy就是用于 MITM 的 proxy，MITM 即中间人攻击（Man-in-the-middle attack）。用于中间人攻击的代理首先会向正常的代理一样转发请求，保障服务端与客户端的通信，其次，会适时的查、记录其截获的数据，或篡改数据，引发服务端或客户端特定的行为。
    https://blog.wolfogre.com/posts/usage-of-mitmproxy/
    https://blog.csdn.net/Chen_chong__/article/details/85526088
