Spring

问题记录：
0、Spring容器
spring bean作用域有以下5个：
1.singleton:单例模式，当spring创建applicationContext容器的时候，spring会欲初始化所有的该作用域实例，加上lazy-init就可以避免预处理；
2.prototype：原型模式，每次通过getBean获取该bean就会新产生一个实例，创建后spring将不再对其管理。

====下面是在web项目下才用到的===
3.request：搞web的大家都应该明白request的域了吧，就是每次请求都新产生一个实例，和prototype不同就是创建后，接下来的管理，spring依然在监听
4.session:每次会话，同上；
5.global session:全局的web域，类似于servlet中的application。

与Struts2比较：
1) Struts2会对每一个请求,产生一个Action的实例来处理；（因为Struts2的参数是成员变量啊，如果单例会出问题的，比如被覆盖！）
2) Spring的Ioc容器管理的bean默认是单实例的。
    scope='prototype/singleton'（多例/单例）


Spring的三种构造方式：
1 field注入
2 构造器注入（推荐？）
3 setter注入

@Resource和@Autowired：
@Resource装配顺序：
①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。
②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。
③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。
④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。
@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。
使用@Autowired时，如果容器中有一个以上匹配的bean时，则可以通过@Qualifier注解限定bean的名称


1、拦截器
可以定义优先级（定义子在xml，好像也可以使用注解，如：swagger的参数校验多从拦截定义了优先级貌似）
...

2、增强类型？
其实就是AOP（五类增强类型：前置、后置、环绕、抛出、引介增强（引介增强不太好理解，后面在看吧@Todo））

3、事务隔离级别（CAS是Compare-and-swap（比较与替换）的简写）
ACID，是指在可靠数据库管理系统（DBMS）中，事务(transaction)所应该具有的四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）.这是可靠数据库所应具备的几个特性.下面针对这几个特性进行逐个讲解.
        原子性（Atomicity）：原子性是指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生。
        一致性（Consistency）：一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。
        隔离性（Isolation）：多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。
            事务之间的相互影响分为几种，分别为：
                脏读：脏读意味着一个事务读取了另一个事务未提交的数据
                不可重复读：一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的
                幻读：幻读，是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。

                丢失更新：两个事务同时读取同一条记录，A先修改记录，B也修改记录（B是不知道A修改过），B提交数据后B的修改结果覆盖了A的修改结果。

            解决：
            未提交读：在读数据时不会检查或使用任何锁。因此，在这种隔离级别中可能读取到没有提交的数据。

            已提交读：只读取提交的数据并等待其他事务释放排他锁。读数据的共享锁在读操作完成后立即释放。已提交读是SQL Server的默认隔离级别。

            可重复读：像已提交读级别那样读数据，但会保持共享锁直到事务结束。（重点是共享锁要等到当前事务结束才释放，所以整个事务中，无论读多少次结果都一致！）
                （悲观锁？？？）

            可串行读：工作方式类似于可重复读。但它不仅会锁定受影响的数据，还会锁定这个范围。这就阻止了新数据插入查询所涉及的范围。

        持久性（Durability）：
            持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。


4、事务传播机制
@Transactional相关属性propagation配置选项：

REQUIRED 默认选项：支持当前已经存在的事务，如果还没有事务，就创建一个新事务

REQUIRES_NEW 挂起当前事务，创建一个新事务，新事务可以不受前一个事务的影响

NESTED（嵌套的） 在当前事务中创建一个嵌套事务，嵌套事务也受前一个事务的影响（与默认的REQUIRED很像，只是会新开一个事务）
ServiceA {

    /**
     * 事务属性配置为 PROPAGATION_REQUIRED
     */
    void methodA() {
        // ...
        try {
            // 什么叫做savePoint，意味着只会滚methodB方法的事务（可能操作了表，产生了脏数据）
            // 而且如果B失败了，那么产生的脏数据不能要，且A不想回滚而是想继续做其他事；
            // 并且B事务的成功提交要依赖于A的成功提交，那PROPAGATION_NESTED是很好的选择！
            ServiceB.methodB();
        } catch (SomeException) {
            // 执行其他业务, 如 ServiceC.methodC();
            // 也可以选择回滚（直接不捕获异常也可以）
        }
    }

}

ServiceB {

    /**
     * 事务属性配置为 PROPAGATION_NESTED
     */
    void methodB() {
    }

}

MANDATORY（强制的） 强制要求在事务中运行

NEVER 强制要求不在事务中运行


所谓事务传播性，就是被调用者的事务与调用者的事务之间的关系。举例说明。

    //in A.java
    Class A {
        @Transactional(propagation=propagation.REQUIRED)
        public void aMethod {
            B b = new B();
            b.bMethod();
        }
    }

    //in B.java
    Class B {
        @Transactional(propagation=propagation.REQUIRED)
        public void bMethod { //something }
    }

　　在上面这个例子中，传播性被设为了REQUIRED，注意，这是默认值，也即不进行该参数配置等于配置成REQUIRED。

　　REQUIRED的含义是，支持当前已经存在的事务，如果还没有事务，就创建一个新事务。在上面这个例子中，假设调用aMethod前不存在任何事务，那么执行aMethod时会自动开启一个事务，而由aMethod调用bMethod时，由于事务已经存在，因此会使用已经存在的事务（也就是执行aMethod之前创建的那个事务）。

　　对于这样的配置，如果bMethod过程中发生异常需要回滚，那么aMethod中所进行的所有数据库操作也将同时被回滚，因为这两个方法使用了同一个事务。

　　MANDATORY的含义是，支持当前已经存在的事务，如果还没有事务，就抛出一个异常。如果上例中aMethod的传播性配置为MANDATORY，我们就无法在没有事务的情况下调用aMethod，因此，传播性为MANDATORY的方法必定是一个其他事务的子事务，当逻辑上独立存在没有意义或者可能违反数据、事务完整性的时候，就可以考虑设置这样的传播性设置。

　　NESTED的含义是，在当前事务中创建一个嵌套事务，如果还没有事务，那么就简单地创建一个新事务。

　　REQUIRES_NEW的含义是，挂起当前事务，创建一个新事务，如果还没有事务，就简单地创建一个新事务。

    　　请注意以上两者的区别，大多数情况下一上两种传播性行为是类似的，不过在事务回滚的问题上，以上两者有很大的区别。

    　　首先，REQUIRES_NEW会创建一个与原事务无关的新事务，尽管是由一个事务调用了另一个事务，但却没有父子关系。

    　　如果bMethod的传播性是REQUIRES_NEW，而抛出了一个异常，则bMethod一定会被回滚，而如果aMethod捕获并处理了这个bMethod抛出的异常，那么aMethod仍有可能成功提交。当然，如果aMethod没有处理这个异常，那么aMethod也会被回滚。

    　　如果aMethod在bMethod完成后出现了异常，那么bMethod已经提交而无法回滚，只有aMethod被回滚了。

    　　而对于NESTED，虽然也会创建一个新事务，但是这个事务与调用者是有父子关系的相互依存的。

    　　如果bMethod的传播性是NESTED，而抛出了一个异常，事务的回滚行为与REQUIRES_NEW是一致的。

    　　但是如果aMethod在bMethod完成后出现了异常，bMethod同样也会被回滚。因为事实上，EJB中没有对于NESTED传播性的类似实现，NESTED并不是真正启动了一个事务，而是开启了一个新的savepoint。

　　NEVER的含义很简单，就是强制要求不在事务中运行，如果当前存在一个事务，则抛出异常，因此如果bMethod传播性是NEVER，则一定抛出异常。

　　NOT_SUPPORTED的含义是，强制不在事务中运行，如果当前存在一个事务，则挂起该事务。

　　SUPPORTS的含义是，支持当前事务，如果没有事务那么就不在事务中运行。SUPPORTS传播性的逻辑含义比较模糊，因此一般是不推荐使用的。


5、事务控制相关源码（其实也是关于AOP的）
数据源、数据库连接...
多数据源与多数据源的事务问题

@Todo 看不下去了
AOP：注意是动态代理以及注解的配合吧


6、关于IOC（看看源码找些读读）
自己的简单实现：
提供工厂方法，解析ApplicationContext.xml，通过找到标签和属性将beanName和实现类class路径及其实现放到Map，通过工厂获取实例时从map取出class，通过反射生成实例返回，然后如果是单例的化则将其实例存储到另一个Map，下次取时先从Map中get。
/**
 *  工厂模式：解析xml配置文件——提供获取service的方法——以便直接使用接口来调用操作业务（dao）的方法
 */
public class ServiceFactory {
	private static HashMap serviceClassNames = new HashMap();// 缓存实现类
	private static HashMap serviceInstances = new HashMap();// 缓存实现类实例
	static {
		SAXBuilder builder = new SAXBuilder();
		try {
			//4.1 读取service配置文件 得到service name和具体的实现类——注意配置文件的路径！
			Document doc = builder
					.build(ServiceFactory.class
							.getResourceAsStream("/config-resource/service-config.xml"));
			Element root = doc.getRootElement();
			List children = root.getChildren();
			for (Iterator iter = children.iterator(); iter.hasNext();) {
				Element serviceNode = (Element) iter.next();
				String serviceName = serviceNode.getAttributeValue("name");
				String className = serviceNode.getAttributeValue("class");
				serviceClassNames.put(serviceName, className);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	//获取service的方法
	public static Object getService(String serviceName) {
		try {
			Object service = serviceInstances.get(serviceName);
			if (service == null) {
				//className=service.impl.service.impl.DeptServiceImpl
				String className = (String) serviceClassNames.get(serviceName);
				service = Class.forName(className).newInstance();
				serviceInstances.put(serviceName, service);
			}
			System.out.println("createService == "
					+ service.getClass().getName());
			return service;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}


7、SpringMvc相关请求处理源码（与Servlet相关及其线程池）
spring-mvc支持Spring容器与MVC容器共存，此时，Spring容器即根容器，mvc容器将根容器视为父容器。

参考图片：image/SpringMvc处理流程.png

>>>>主题解析器
ThemeResolver接口配合Spring标签库使用可以通过动态决定使用的css以及图片的方式达到换肤的效果。

>>>>映射关系是如何保存(注册)的
内部类AbstractHandlerMethodMapping.MappingRegistry是映射的载体。

其register方法简略版源码:
public void register(T mapping, Object handler, Method method) {
    //包装bean和方法
    HandlerMethod handlerMethod = createHandlerMethod(handler, method);
    this.mappingLookup.put(mapping, handlerMethod);
    List<String> directUrls = getDirectUrls(mapping);
    for (String url : directUrls) {
        this.urlLookup.add(url, mapping);
    }
    String name = null;
    if (getNamingStrategy() != null) {
        name = getNamingStrategy().getName(handlerMethod, mapping);
        addMappingName(name, handlerMethod);
    }
    CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);
    if (corsConfig != null) {
        this.corsLookup.put(handlerMethod, corsConfig);
    }
    this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));
}
mapping其实是一个RequestMappingInfo对象，可以将其看做是**@RequestMapping注解各种属性的一个封装**。最终由RequestMappingInfo.createRequestMappingInfo方法创建，源码:

protected RequestMappingInfo createRequestMappingInfo(
        RequestMapping requestMapping, RequestCondition<?> customCondition) {
    return RequestMappingInfo
            .paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))
            .methods(requestMapping.method())
            .params(requestMapping.params())
            .headers(requestMapping.headers())
            .consumes(requestMapping.consumes())
            .produces(requestMapping.produces())
            .mappingName(requestMapping.name())
            .customCondition(customCondition)
            .options(this.config)
            .build();
}
这就很明显了，具体每种属性什么意义可以参考@RequestMapping源码。

register方法中urlLookup其实就是将paths属性中的每个path都与处理器做映射。

getNamingStrategy方法得到的是一个HandlerMethodMappingNamingStrategy接口的实例，此接口用以根据HandlerMethod得到一个名字
比如对于我们的控制器,SimpleController.echo方法，最终得到的名字将是SC#echo。


>>请求响应
我们先来看一下入口在哪。众所周知，Servlet标准定义了所有请求先由service方法处理，如果是get或post方法，那么再交由doGet或是doPost方法处理。

FrameworkServlet覆盖了service方法:

@Override
protected void service(HttpServletRequest request, HttpServletResponse response) {
    HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());
    if (HttpMethod.PATCH == httpMethod || httpMethod == null) {
        processRequest(request, response);
    } else {
        super.service(request, response);
    }
}
Spring要覆盖此方法的目的在于拦截PATCH请求，PATCH请求与PUT类似，不同在于PATCH是局部更新，而后者是全部更新。可以参考:

FrameworkServlet同样也覆盖了doGet和doPost方法，两者只是调用processRequest方法。


>>请求处理

RequestMappingHandlerAdapter.handleInternal:

@Override
protected ModelAndView handleInternal(HttpServletRequest request,
        HttpServletResponse response, HandlerMethod handlerMethod){
    ModelAndView mav;
    // Execute invokeHandlerMethod in synchronized block if required.
    if (this.synchronizeOnSession) {
        HttpSession session = request.getSession(false);
        if (session != null) {
            Object mutex = WebUtils.getSessionMutex(session);
            synchronized (mutex) {
                mav = invokeHandlerMethod(request, response, handlerMethod);
            }
        } else {
            // No HttpSession available -> no mutex necessary
            mav = invokeHandlerMethod(request, response, handlerMethod);
        }
    } else {
        // No synchronization on session demanded at all...
        mav = invokeHandlerMethod(request, response, handlerMethod);
    }
    if (!response.containsHeader(HEADER_CACHE_CONTROL)) {
        if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {
            applyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);
        }
        else {
            prepareResponse(response);
        }
    }
    return mav;
}
Session同步
可以看出，如果开启了synchronizeOnSession，那么同一个session的请求将会串行执行，这一选项默认是关闭的，当然我们可以通过注入的方式进行改变。


>>返回值解析
>>视图渲染
>>ModelAndView


// @Todo 找时间仔细看吧
1、用户发送请求到前端控制器（DispatcherServlet）。
2、前端控制器请求处理器映射器（HandlerMapping）去查找处理器（Handler）。
3、找到以后处理器映射器（HandlerMappering）向前端控制器返回执行链（HandlerExecutionChain）。
4、前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）。
5、处理器适配器去执行Handler。
6、处理器执行完给处理器适配器返回ModelAndView。
7、处理器适配器向前端控制器返回ModelAndView。
8、前端控制器请求视图解析器（ViewResolver）去进行视图解析。
9、视图解析器向前端控制器返回View。
10、前端控制器对视图进行渲染。
11、前端控制器向用户响应结果。



8、Mybatis映射、数据库连接池相关，结合Spring

关于映射的先不看把！@Todo 以后找时间看

数据源和连接池：
src/main/java/org/apache/ibatis/datasource/
jndi
    JndiDataSourceFactory.java

pooled

    注意！PooledDataSource会组合一个UnpooledDataSource，通过驱动获取连接都是调用UnpooledDataSource的方法

    PoolState.java
          protected PooledDataSource dataSource;
          protected final List<PooledConnection> idleConnections = new ArrayList<>();
          protected final List<PooledConnection> activeConnections = new ArrayList<>();

    PooledConnection.java
          public PooledConnection(Connection connection, PooledDataSource dataSource) {
            this.hashCode = connection.hashCode();
            this.realConnection = connection;
            this.dataSource = dataSource;
            this.createdTimestamp = System.currentTimeMillis();
            this.lastUsedTimestamp = System.currentTimeMillis();
            this.valid = true; // 提供了方法获取和修改
            // 生成Connection代理对象
            this.proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this);
          }

          /**
           * Required for InvocationHandler implementation.
           *
           * @param proxy  - not used
           * @param method - the method to be executed
           * @param args   - the parameters to be passed to the method
           * @see java.lang.reflect.InvocationHandler#invoke(Object, java.lang.reflect.Method, Object[])
           */
          @Override
          public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            String methodName = method.getName();
            if (CLOSE.hashCode() == methodName.hashCode() && CLOSE.equals(methodName)) {
              dataSource.pushConnection(this);
              return null;
            } else {
              try {
                if (!Object.class.equals(method.getDeclaringClass())) {
                  // issue #579 toString() should never fail
                  // throw an SQLException instead of a Runtime
                  checkConnection();
                }
                return method.invoke(realConnection, args);
              } catch (Throwable t) {
                throw ExceptionUtil.unwrapThrowable(t);
              }
            }
          }

    PooledDataSource.java
          /*
           * Closes all active and idle connections in the pool
           */
          public void forceCloseAll() {

          }

          protected void pushConnection(PooledConnection conn) throws SQLException {
               // 关闭线程，看初始线程数是否达到最大值，没达到就放到初始化连接池，否则销毁
          }

          @Override
          public Connection getConnection() throws SQLException {
            return popConnection(dataSource.getUsername(), dataSource.getPassword()).getProxyConnection();
          }

          @Override
          public Connection getConnection(String username, String password) throws SQLException {
            return popConnection(username, password).getProxyConnection();
          }

          private PooledConnection popConnection(String username, String password) throws SQLException {
            // 参考源码及相关注释，这一段和有意思，即实现了从线程池
            // 第一步，看初始化线程池（还有则使用，使用则删除）
            // 否则，看活动线程池（没满则新建，满了则从中取看是否有可用的，没有则进入阻塞（直到超时为止）
            // 为什么活动线程池满了还会有可用的，不是每个新建的都是被某个线程持有了吗：因为可能是某个连接超时了啊（且没有关闭）
            // 注意字段：poolMaximumCheckoutTime
          }

          protected boolean pingConnection(PooledConnection conn) {

          }

    PooledDataSourceFactory.java
        public class PooledDataSourceFactory extends UnpooledDataSourceFactory {

          public PooledDataSourceFactory() {
            this.dataSource = new PooledDataSource();
          }

        }

unpooled
    UnpooledDataSource.java

        @Override
        public Connection getConnection() throws SQLException {
            return doGetConnection(username, password);
        }

        @Override
        public Connection getConnection(String username, String password) throws SQLException {
            return doGetConnection(username, password);
        }

        private Connection doGetConnection(String username, String password) throws SQLException {
            Properties props = new Properties();
            if (driverProperties != null) {
              props.putAll(driverProperties);
            }
            if (username != null) {
              props.setProperty("user", username);
            }
            if (password != null) {
              props.setProperty("password", password);
            }
            return doGetConnection(props);
         }

        private Connection doGetConnection(Properties properties) throws SQLException {
            initializeDriver();
            // 从驱动获取连接
            Connection connection = DriverManager.getConnection(url, properties);
            configureConnection(connection);
            return connection;
        }

        // 配置事务的自动提交和事务隔离级别
        private void configureConnection(Connection conn) throws SQLException {
            if (autoCommit != null && autoCommit != conn.getAutoCommit()) {
              conn.setAutoCommit(autoCommit);
            }
            if (defaultTransactionIsolationLevel != null) {
              conn.setTransactionIsolation(defaultTransactionIsolationLevel);
            }
        }

    UnpooledDataSourceFactory.java
        public UnpooledDataSourceFactory() {
            this.dataSource = new UnpooledDataSource();
        }

        @Override
        public DataSource getDataSource() {
            return dataSource;
        }



src/main/java/org/apache/ibatis/transaction/
jdbc
    JdbcTransaction
    JdbcTransactionFactory

managed
    ManagedTransaction
        getConnection、commit、close、setDesiredAutoCommit、resetAutoCommit
    ManagedTransactionFactory
        和上面的方法差不多，只是commit、rollback方法没哟逻辑

具体的看Spring结合Mybatis的吧，怎么实现事务以及事务的隔离级别！
@Todo （嵌套事务通过savePoint实现是数据库层面的实现 = =）


9、Spring涉及的涉及模式整理：
@Todo




10、@Transaction的其他元素：
readOnly：
该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false

rollbackFor：
该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚
指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)
指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})

rollbackForClassName：
该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：
指定单一异常类名称：@Transactional(rollbackForClassName="RuntimeException")
指定多个异常类名称：@Transactional(rollbackForClassName={"RuntimeException","Exception"}

noRollbackFor：
该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：
指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)
指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})

noRollbackForClassName：
该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：
指定单一异常类名称：@Transactional(noRollbackForClassName="RuntimeException")
指定多个异常类名称：
@Transactional(noRollbackForClassName={"RuntimeException","Exception"})

propagation：
该属性用于设置事务的传播行为

isolation：
该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置

timeout：
该属性用于设置事务的超时秒数，默认值为-1表示永不超时

