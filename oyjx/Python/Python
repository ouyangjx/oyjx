相关内容整理自：
    http://www.runoob.com/python/python-tutorial.html
    《Head first Python》
    《Python核心编程》
    ...

Python基础：

0、Python 介绍、环境搭建

简介
    Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。
    Python由Guido van Rossum于1989年底发明，第一个公开发行版发行于1991年。
    像Perl语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。
    Python的3.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下兼容。

环境搭建
    略

1、Python 解释器、基础语法、基本数据类型、运算符

>>Python 解释器
    Linux/Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在 /usr/local/python3 目录中。

    安装完成后，我们可以将路径 /usr/local/python3/bin 添加到您的 Linux/Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。
        $ PATH=$PATH:/usr/local/python3/bin/python3    # 设置环境变量
        $ python3 --version
        Python 3.4.0

    在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:\Python34 下:
        set path=%path%;C:\python34

交互式编程
    我们可以在命令提示符中输入"Python"命令来启动Python解释器：
        $ python3

    执行以上命令后，出现如下窗口信息：
        $ python3
        Python 3.4.0 (default, Apr 11 2014, 13:05:11)
        [GCC 4.8.2] on linux
        Type "help", "copyright", "credits" or "license" for more information.
        >>>

    在 python 提示符中输入以下语句，然后按回车键查看运行效果：
        print ("Hello, Python!");
    以上命令执行结果如下：
        Hello, Python!

    当键入一个多行结构时，续行是必须的。我们可以看下如下 if 语句：
        >>> flag = True
        >>> if flag :
        ...     print("flag 条件为 True!")
        ...
        flag 条件为 True!


脚本式编程
    将如下代码拷贝至 hello.py文件中：
        print ("Hello, Python!");
    通过以下命令执行该脚本：
        python3 hello.py
    输出结果为：
        Hello, Python!

    在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：
        #! /usr/bin/env python3
    然后修改脚本权限，使其有执行权限，命令如下：
        $ chmod +x hello.py
    执行以下命令：
        ./hello.py
    输出结果为：
        Hello, Python!



>>Python 基础语法

编码
    默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：
        # -*- coding: cp-1252 -*-
    上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。

Python 标识符
    @Todo

Python 保留字符
    保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：
    >>> import keyword
    >>> keyword.kwlist
    ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else',
    'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or',
    'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

行和缩进
    学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。
    缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。

    建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用

多行语句
    Python语句中一般以新行作为语句的结束符。
    但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示：
        total = item_one + \
                item_two + \
                item_three
    语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：
        days = ['Monday', 'Tuesday', 'Wednesday',
                'Thursday', 'Friday']

Python 引号
    Python 可以使用引号( ' )、双引号( " )、三引号( ''' 或 """ ) 来表示字符串，引号的开始与结束必须的相同类型的。
    其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。
        word = 'word'
        sentence = "这是一个句子。"
        paragraph = """这是一个段落。
        包含了多个语句"""

Python 注释
    python中单行注释采用 # 开头。
        # 第一个注释
        print "Hello, Python!";  # 第二个注释

    python 中多行注释使用三个单引号(''')或三个双引号(""")。
        '''
        这是多行注释，使用单引号。
        这是多行注释，使用单引号。
        这是多行注释，使用单引号。
        '''

        """
        这是多行注释，使用双引号。
        这是多行注释，使用双引号。
        这是多行注释，使用双引号。
        """

Python 空行
    函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。
    空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。
    记住：空行也是程序代码的一部分。

等待用户输入
    执行下面的程序在按回车键后就会等待用户输入：
        input("\n\n按下 enter 键后退出。")
    以上代码中 ，"\n\n"在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。

同一行显示多条语句
    Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：
        import sys; x = 'runoob'; sys.stdout.write(x + '\n')

Print 输出
    print 默认输出是换行的，如果要实现不换行，需加上, end='' 【Python3，Python2只要在变量末尾加上逗号】
        print("hello world", end='')
        print("！")

        结果：
            hello world!

多个语句构成代码组
    缩进相同的一组语句构成一个代码块，我们称之代码组。
    像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。
    我们将首行及后面的代码组称为一个子句(clause)。
    如下实例：
        if expression :
           suite
        elif expression :
           suite
        else :
           suite

import 与 from...import
    在 python 用 import 或者 from...import 来导入相应的模块。
    将整个模块(somemodule)导入，格式为： import somemodule
    从某个模块中导入某个函数,格式为： from somemodule import somefunction
    从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc
    将某个模块中的全部函数导入，格式为： from somemodule import *



>>Python 基本数据类型

变量赋值
    Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。
    在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。
    等号（=）用来给变量赋值。
    等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。
        counter = 100 # 赋值整型变量
        miles = 1000.0 # 浮点型
        name = "John" # 字符串

        print(counter)
        print(miles)
        print(name)

        结果：
            100
            1000.0
            John

多个变量赋值
    Python允许你同时为多个变量赋值。例如：
        a = b = c = 1
    以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。（三个变量被分配到相同的内存空间上？@Todo）

    您也可以为多个对象指定多个变量。例如：
        a, b, c = 1, 2, "john"
    以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 "john" 分配给变量 c。


标准数据类型

    Python3 中有六个标准的数据类型：
        Number（数字）
        String（字符串）
        List（列表）
        Tuple（元组）
        Set（集合）
        Dictionary（字典）

    Python3 的六个标准数据类型中：
        不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
        可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。

Numbers（数字）

    Python3 支持 int、float、bool、complex（复数）。
    在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。
    像大多数语言一样，数值类型的赋值和计算都是很直观的。
    内置的 type() 函数可以用来查询变量所指的对象类型。
        >>> a, b, c, d = 20, 5.5, True, 4+3j
        >>> print(type(a), type(b), type(c), type(d))
        <class 'int'> <class 'float'> <class 'bool'> <class 'complex'>
    此外还可以用 isinstance 来判断：
        >>>a = 111
        >>> isinstance(a, int)
        True
    isinstance 和 type 的区别在于：
        type()不会认为子类是一种父类类型。
        isinstance()会认为子类是一种父类类型。

        >>> class A:
        ...     pass
        ...
        >>> class B(A):
        ...     pass
        ...
        >>> isinstance(A(), A)
        True
        >>> type(A()) == A
        True
        >>> isinstance(B(), A)
        True
        >>> type(B()) == A
        False

        注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。

    当你指定一个值时，Number对象就会被创建：
        var1 = 1
        var2 = 10
    您也可以使用del语句删除一些对象的引用。
    del语句的语法是：
        del var1[,var2[,var3[....,varN]]]]
    您可以通过使用del语句删除单个或多个对象的引用。例如：
        del var
        del var_a, var_b

    数值运算
        >>>5 + 4  # 加法
        9
        >>> 4.3 - 2 # 减法
        2.3
        >>> 3 * 7  # 乘法
        21
        >>> 2 / 4  # 除法，得到一个浮点数
        0.5
        >>> 2 // 4 # 除法，得到一个整数
        0
        >>> 17 % 3 # 取余
        2
        >>> 2 ** 5 # 乘方
        32

        注意：
            1、Python可以同时为多个变量赋值，如a, b = 1, 2。
            2、一个变量可以通过赋值指向不同类型的对象。
            3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。
            4、在混合计算时，Python会把整型转换成为浮点数。

    数值类型实例
        一些数值类型的实例：（下面是Python2的，而Python中没有long）
        int	      long	               float	        complex
        10	    51924361L	            0.0	            3.14j
        100	    -0x19323L	            15.20	        45.j
        -786	0122L	                -21.9	        9.322e-36j
        080	    0xDEFABCECBDAECBFBAEl	32.3e+18	    .876j
        -0490	535633629843L	        -90.	        -.6545+0J
        -0x260	-052318172735L	        -32.54e100	    3e+26J
        0x69	-4721885298529L	        70.2E-12	    4.53e-7j

        长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。
        Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。
        注意：long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。


String（字符串）
    Python中的字符串用单引号 ' 或双引号 " 括起来，同时使用反斜杠 \ 转义特殊字符。

    python的字串列表有2种取值顺序:
        从左到右索引默认0开始的，最大范围是字符串长度少1
            0  1  2  3  4  5
        从右到左索引默认-1开始的，最大范围是字符串开头
            -6 -5 -4 -3 -2 -1

    参考图片：image/Python字符串索引图解.png

    如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。
    [头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。
        比如:
            >>> s = 'abcdef'
            >>> s[1:5]
            'bcde'
        当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。
        上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。

    加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：
        str = 'Hello World!'
        print(str)           # 输出完整字符串
        print(str[0])        # 输出字符串中的第一个字符
        print(str[2:5])      # 输出字符串中第三个至第五个之间的字符串
        print(str[2:])       # 输出从第三个字符开始的字符串
        print(str * 2)       # 输出字符串两次
        print(str + 'TEST')  # 输出连接的字符串

        结果：
            Hello World!
            H
            llo
            llo World!
            Hello World!Hello World!
            Hello World!TEST

    Python 使用反斜杠(\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：
        >>> print('Ru\noob')
        Ru
        oob
        >>> print(r'Ru\noob')
        Ru\noob
        >>>

    另外，反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 '''...''' 跨越多行。
    注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。

    实例：
        >>>word = 'Python'
        >>> print(word[0], word[5])
        P n
        >>> print(word[-1], word[-6])
        n P

     与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。
     注意：
        1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
        2、字符串可以用+运算符连接在一起，用*运算符重复。
        3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
        4、Python中的字符串不能改变。


List（列表） => 即数组和集合
    List（列表） 是 Python 中使用最频繁的数据类型。
    列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。
    列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
    和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
    列表截取的语法格式如下：
        变量[头下标:尾下标]
    从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。

    参考图片：image/Python列表索引图解.png

    加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：
        list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]
        tinylist = [123, 'john']
        print(list)               # 输出完整列表
        print(list[0])            # 输出列表的第一个元素
        print(list[1:3])          # 输出第二个至第三个元素
        print(list[2:])           # 输出从第三个开始至列表末尾的所有元素
        print(tinylist * 2)       # 输出列表两次
        print(list + tinylist)    # 打印组合的列表

        结果：
            ['runoob', 786, 2.23, 'john', 70.2]
            runoob
            [786, 2.23]
            [2.23, 'john', 70.2]
            [123, 'john', 123, 'john']
            ['runoob', 786, 2.23, 'john', 70.2, 123, 'john']

    与Python字符串不一样的是，列表中的元素是可以改变的：
        >>>a = [1, 2, 3, 4, 5, 6]
        >>> a[0] = 9
        >>> a[2:5] = [13, 14, 15]
        >>> a
        [9, 2, 13, 14, 15, 6]
        >>> a[2:5] = []   # 将对应的元素值设置为 []
        >>> a
        [9, 2, 6]

    List内置了有很多方法，例如append()、pop()等等，这在后面会讲到。
    注意：
        1、List写在方括号之间，元素用逗号隔开。
        2、和字符串一样，list可以被索引和切片。
        3、List可以使用+操作符进行拼接。
        4、List中的元素是可以改变的。


Tuple（元组） => 类似于List（列表）
    元组用"()"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。

        tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )
        tinytuple = (123, 'john')

        print(tuple)               # 输出完整元组
        print(tuple[0])            # 输出元组的第一个元素
        print(tuple[1:3])          # 输出第二个至第三个的元素
        print(tuple[2:])           # 输出从第三个开始至列表末尾的所有元素
        print(tinytuple * 2)       # 输出元组两次
        print(tuple + tinytuple)   # 打印组合的元组

        结果：
            ('runoob', 786, 2.23, 'john', 70.2)
            runoob
            (786, 2.23)
            (2.23, 'john', 70.2)
            (123, 'john', 123, 'john')
            ('runoob', 786, 2.23, 'john', 70.2, 123, 'john')


    元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。
    其实，可以把字符串看作一种特殊的元组。

    >>>tup = (1, 2, 3, 4, 5, 6)
    >>> print(tup[0])
    1
    >>> print(tup[1:5])
    (2, 3, 4, 5)
    >>> tup[0] = 11  # 修改元组元素的操作是非法的
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: 'tuple' object does not support item assignment
    >>>

    虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。
    构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：
        tup1 = ()    # 空元组
        tup2 = (20,) # 一个元素，需要在元素后添加逗号

    string、list和tuple都属于sequence（序列）。

    注意：
        1、与字符串一样，元组的元素不能修改。
        2、元组也可以被索引和切片，方法和列表一样。
        3、注意构造包含0或1个元素的元组的特殊语法规则。
        4、元组也可以使用+操作符进行拼接。


Set（集合）
    集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。
    基本功能是进行成员关系测试和删除重复元素。
    可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
    创建格式：
        parame = {value01,value02,...}
        或者
        set(value)

    实例：
        student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}

        print(student)   # 输出集合，重复的元素被自动去掉

        # 成员测试
        if 'Rose' in student :
            print('Rose 在集合中')
        else :
            print('Rose 不在集合中')

        # set可以进行集合运算
        a = set('abracadabra')
        b = set('alacazam')

        print(a)
        print(a - b)     # a 和 b 的差集
        print(a | b)     # a 和 b 的并集
        print(a & b)     # a 和 b 的交集
        print(a ^ b)     # a 和 b 中不同时存在的元素

        结果：
            {'Mary', 'Jim', 'Rose', 'Jack', 'Tom'}
            Rose 在集合中
            {'b', 'a', 'c', 'r', 'd'}
            {'b', 'd', 'r'}
            {'l', 'r', 'a', 'c', 'z', 'm', 'b', 'd'}
            {'a', 'c'}
            {'l', 'r', 'z', 'm', 'b', 'd'}


Dictionary（字典） => 即map
    字典（dictionary）是Python中另一个非常有用的内置数据类型。
    列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
    字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。
    键(key)必须使用不可变类型。
    在同一个字典中，键(key)必须是唯一的。

        dict = {}
        dict['one'] = "This is one"
        dict[2] = "This is two"
        tinydict = {'name': 'john','code':6734, 'dept': 'sales'}

        print(dict['one'])          # 输出键为'one' 的值
        print(dict[2])              # 输出键为 2 的值
        print(tinydict)             # 输出完整的字典
        print(tinydict.keys())      # 输出所有键
        print(tinydict.values())    # 输出所有值

        结果：
            This is one
            This is two
            {'dept': 'sales', 'code': 6734, 'name': 'john'}
            ['dept', 'code', 'name']
            ['sales', 6734, 'john']


    构造函数 dict() 可以直接从键值对序列中构建字典如下：
        >>>dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])
        {'Taobao': 3, 'Runoob': 1, 'Google': 2}

        >>> {x: x**2 for x in (2, 4, 6)}
        {2: 4, 4: 16, 6: 36}

        >>> dict(Runoob=1, Google=2, Taobao=3)
        {'Runoob': 1, 'Google': 2, 'Taobao': 3}

    另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。
    注意：
        1、字典是一种映射类型，它的元素是键值对。
        2、字典的关键字必须为不可变类型，且不能重复。
        3、创建空字典使用 { }。


Python数据类型转换
    有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。

    以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
    int(x [,base]) 将x转换为一个整数

    # long(x [,base] ) 将x转换为一个长整数 # Python3中没有

    float(x) 将x转换到一个浮点数

    complex(real [,imag]) 创建一个复数

    str(x) 将对象 x 转换为字符串

    repr(x) 将对象 x 转换为表达式字符串

    eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象

    tuple(s) 将序列 s 转换为一个元组

    list(s) 将序列 s 转换为一个列表

    set(s) 转换为可变集合

    dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。

    frozenset(s) 转换为不可变集合

    chr(x) 将一个整数转换为一个字符

    # unichr(x) 将一个整数转换为Unicode字符 # Python3中没有

    ord(x) 将一个字符转换为它的整数值

    hex(x) 将一个整数转换为一个十六进制字符串

    oct(x) 将一个整数转换为一个八进制字符串



>>Python 运算符

Python 算术运算符
    以下假设变量a为10，变量b为21：
        +	加       - 两个对象相加	a + b 输出结果 31
        -	减       - 得到负数或是一个数减去另一个数	a - b 输出结果 -11
        *	乘       - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 210
        /	除       - x 除以 y	b / a 输出结果 2.1
        %	取模     - 返回除法的余数	b % a 输出结果 1
        **	幂       - 返回x的y次幂	a**b 为10的21次方
        //	取整除    - 向下取接近除数的整数
                        >>> 9//2
                        4
                        >>> -9//2
                        -5


Python 比较（关系）运算符
    以下假设变量a为10，变量b为20：
        ==	等于      - 比较对象是否相等	            (a == b) 返回 False。
        !=	不等于     - 比较两个对象是否不相等	        (a != b) 返回 True。
        >	大于      - 返回x是否大于y	(a > b)         返回 False。
        <	小于      - 返回x是否小于y。
                      所有比较运算符返回1表示真，返回0表示假。
                      这分别与特殊的变量True和False等价。
                      注意，这些变量名的大写。	        (a < b) 返回 True。
        >=	大于等于    - 返回x是否大于等于y。	        (a >= b) 返回 False。
        <=	小于等于    - 返回x是否小于等于y。	        (a <= b) 返回 True。


Python 赋值运算符
    以下假设变量a为10，变量b为20：
        =	简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
        +=	加法赋值运算符	c += a 等效于 c = c + a
        -=	减法赋值运算符	c -= a 等效于 c = c - a
        *=	乘法赋值运算符	c *= a 等效于 c = c * a
        /=	除法赋值运算符	c /= a 等效于 c = c / a
        %=	取模赋值运算符	c %= a 等效于 c = c % a
        **=	幂赋值运算符	    c **= a 等效于 c = c ** a
        //=	取整除赋值运算符	c //= a 等效于 c = c // a


Python 逻辑运算符
    Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:
        and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	(a and b) 返回 20。
        or	x or y	布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。	        (a or b) 返回 10。
        not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False


Python 位运算符
    按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：
    下表中变量 a 为 60，b 为 13二进制格式如下：
        a = 0011 1100
        b = 0000 1101
        -----------------
        a&b = 0000 1100
        a|b = 0011 1101
        a^b = 0011 0001
        ~a  = 1100 0011

    &	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	                (a & b) 输出结果 12 ，二进制解释： 0000 1100
    |	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	                                (a | b) 输出结果 61 ，二进制解释： 0011 1101
    ^	按位异或运算符：当两对应的二进位相异时，结果为1	                                        (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
    ~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1	                (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
    <<	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
    >>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数	        a >> 2 输出结果 15 ，二进制解释： 0000 1111


Python 成员运算符
    除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。
        in	    如果在指定的序列中找到值返回 True，否则返回 False。	    x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
        not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。


Python 身份运算符
    身份运算符用于比较两个对象的存储单元：（类似Java的 == 和 != @Todo）
        is	    is  是判断两个标识符是不是引用自一个对象         x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
        is not	is not 是判断两个标识符是不是引用自不同对象	    x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。
    注： id()函数用于获取对象内存地址。

    is 与 == 区别：（即Java中 == 和 equals的区别）
        is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。


Python 运算符优先级
    以下表格列出了从最高到最低优先级的所有运算符：
        **	                        指数 (最高优先级)
        ~ + -	                    按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
        * / % //	                乘，除，取模和取整除
        + -	                        加法减法
        >> <<	                    右移，左移运算符
        &	                        位 'AND'
        ^ |	                        位运算符
        <= < > >=	                比较运算符
        <> == !=	                等于运算符
        = %= /= //= -= += *= **=	赋值运算符
        is is not	                身份运算符
        in not in	                成员运算符
        and or not	                逻辑运算符


2、Python 数字



3、Python 字符串



4、Python 列表



5、Python 元组



6、Python 集合



7、Python 字典



8、Python 条件控制、循环语句、迭代器与生成器



9、Python 函数、模块



10、Python 数据结构



11、Python 输入和输出、File、OS



12、Python 错误和异常



13、Python 面向对象



14、Python 标准库概览




Python高级：


1、Python 正则表达式



2、Python CGI编程
CGI 目前由NCSA维护，NCSA定义CGI如下：
CGI(Common Gateway Interface),通用网关接口,它是一段程序,运行在服务器上如：HTTP服务器，提供同客户端HTML页面的接口。



3、Python MySQL(mysql-connector)



4、Python MySQL(PyMySQL)



5、Python Mongodb



6、Python 网络编程



7、Python SMTP发送邮件



8、Python 多线程



9、Python XML解析



10、Python JSON



11、Python 日期和时间



12、Python 内置函数



13 Python uwsgi 安装配置
如何部署简单的 WSGI 应用和常见的 Web 框架



14、Python 日志等工具



15、Python 2.x 与 3​​.x 版本区别


