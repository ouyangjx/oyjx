0、一些规约

除了多行注释用""" """，其余皆是首选单引号
安装IDEA的编码规范，空格、换行、命名等

可能是标准的标准规范：
参考：https://www.jianshu.com/p/a793c0d960fe

模块名
    通常是小写字母，单词之间用_分割
包名
    和模块名一样
文件名
    全小写，可使用下划线
类名
    几乎毫无例外的，类名都使用首字母大写开头（Pascal命名风格，首字母大写，后面的驼峰）的规范。
变量
    全局变量名
        大写字母，单词之间用 _分割
    普通变量
        小写字母，单词之间用 _分割
        注意：
            不论是类成员变量还是全局变量，均不使用 m 或 g 前缀(匈牙利标记法)。
            私有类成员使用单一下划线前缀标识，多定义公开成员，少定义私有成员。
            变量名不应带有类型信息，因为Python是动态类型语言。如 iValue、names_list、dict_obj 等都是不好的命名。
    实例变量：
        以 _ 开头，其他和普通变量一样
    私有实例变量（外部访问会报错）
        以 __开头（2个下划线），其他和普通变量一样
    专有变量
        __开头，__结尾，一般为python的自有变量
        不要以这种方式命名普通变量，这个是保留字，要满足防御性编程需求
函数
    普通函数
        和普通变量一样
    私有函数（外部访问会报错）
        以 __ 开头（2个下划线），其他和普通函数一样
    函数和方法的参数
        总使用“self”作为实例方法的第一个参数
        总使用“cls”作为类方法的第一个参数 @Todo
常量
    常量名所有字母大写，由下划线连接各个单词如 MAX_OVERFLOW、TOTAL
异常
    因为异常也是一个类，所以遵守类的命名规则，此外，如果异常实际上指代一个错误的话，应该使用“Error”做后缀。
缩写
    命名应当尽量使用全拼写的单词，缩写的情况有如下两种：
        常用的缩写，如XML、ID等，在命名时也应只大写首字母，如XmlParser
        命名中含有长单词，对某个单词进行缩写。这时应使用约定成俗的缩写方式
        function	fn
        text	    txt
        object	    obj
        count	    cnt
        number	    num
        ...

前导后缀下划线总结：
    一个前导下划线：表示非公有。
    一个后缀下划线：避免关键字冲突。
    两个前导下划线：当命名一个类属性引起名称冲突时使用。
    两个前导和后缀下划线：“魔术”（有特殊用途）对象或者属性，例如init或者file。绝对不要创造这样的名字，而只是使用它们。

下划线核心风格
    一般来讲，变量名_xxx被看作是“私有的”，在模块或类外不可以使用。当变量是私有的时候，用_xxx 来表示变量是很好的习惯。
    "单下划线" 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量
    "双下划线" 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据

    以单下划线开头_foo的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；
    以双下划线开头的__foo代表类的私有成员；
    以双下划线开头和结尾的__foo__代表python里特殊方法专用的标识，如__init__（）代表类的构造函数。


1、关于Python安装

Linux、Windows、Mac


2、关于Python版本

alias python='/usr/bin/python3.6' 指定Ubuntu默认的Python版本，非永久性好像

3、关于Python类库

pip和相关问题：


python- or python3-：


4、关于IDE（PyCharm）

解析器和类库安装问题


import问题：

不加完整的包名（项目下一层开始如：oyjx.common.common_test）时无法导入自己的模块（.py文件）
    找到文件夹，右键 Mark Directory as，然后选择source root即可

同目录：
    直接import文件名即可

跨目录：
    参考oyjx/thread/threading_demo.py 引入 oyjx/common/common_test.py
    import sys
    sys.path.append("..")
    from common.common_test import *

Debug报错：
    module 'thread' has no attribute 'start_new_thread'
    https://blog.csdn.net/jacke121/article/details/79377629
原因：
    项目下有个thread包名，且Mark Directory as source root，debug时从该thread包下找属性，改名即可！


5、Java VS Python


6、Python有意思的好玩的类库
    1、fake_useragent
    from fake_useragent import FakeUserAgent
    self.user_agent = FakeUserAgent(use_cache_server=False)
    或者
    import fake_useragent
    location = 'storage/fake_useragent%s.json' % fake_useragent.VERSION
    self.user_agent = fake_useragent.UserAgent(path=location)

    2、


7、Python GIL
需要明确的一点是GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。

Python的每个版本中也在逐渐改进GIL和线程调度之间的互动关系。例如先尝试持有GIL在做线程上下文切换，在IO等待时释放GIL等尝试。但是无法改变的是GIL的存在使得操作系统线程调度的这个本来就昂贵的操作变得更奢侈了。

简单的总结下就是：Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。

如何避免受到GIL的影响：
    1、用multiprocess替代Thread
        它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。
        但它的引入会增加程序实现时线程间数据通讯和同步的困难，这个额外的实现成本使得本来就非常痛苦的多线程程序编码，变得更加痛苦了。

    2、用其他解析器
        像JPython和IronPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助

    3、Python社区也在非常努力的不断改进GIL，甚至是尝试去除GIL。并在各个小版本中有了不少的进步
        另一个改进Reworking the GIL
        – 将切换颗粒度从基于opcode计数改成基于时间片计数
        – 避免最近一次释放GIL锁的线程再次被立即调度
        – 新增线程优先级功能（高优先级线程可以迫使其他线程释放所持有的GIL锁）


8、Python垃圾回收机制



一些记录：

>>Python数据类型直接的转换
https://www.cnblogs.com/mywood/p/7428138.html

对python内置的数据类型进行转换时，可以使用内置函数，常用的类型转换函数如下：
函数格式	                    使用示例	                                                                描述
int(x [,base])	        int("8")	                                        可以转换的包括String类型和其他数字类型，但是会丢失精度
float(x)	            float(1)或者float("1")	                            可以转换String和其他数字类型，不足的位数用0补齐，例如1会变成1.0
complex(real ,imag)	    complex("1")或者complex(1,2)	                        第一个参数可以是String或者数字，第二个参数只能为数字类型，第二个参数没有时默认为0
str(x)	                str(1)	                                            将数字转化为String
repr(x)	                repr(Object)	                                    返回一个对象的String格式
eval(str)	            eval("12+23")	                                    执行一个字符串表达式，返回计算的结果,如例子中返回35
tuple(seq)	            tuple((1,2,3,4))	                                参数可以是元组、列表或者字典，wie字典时，返回字典的key组成的集合
list(s)	                list((1,2,3,4))	                                    将序列转变成一个列表，参数可为元组、字典、列表，为字典时，返回字典的key组成的集合
set(s)	                set(['b', 'r', 'u', 'o', 'n'])或者set("asdfg")	    将一个可以迭代对象转变为可变集合，并且去重复，返回结果可以用来计算差集x - y、并集x | y、交集x & y
frozenset(s)	        frozenset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])	        将一个可迭代对象转变成不可变集合，参数为元组、字典、列表等，
chr(x)	                chr(0x30)	                                        chr()用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。返回值是当前整数对应的ascii字符。
ord(x)	                ord('a')	                                        返回对应的 ASCII 数值，或者 Unicode 数值
hex(x)	                hex(12)	                                            把一个整数转换为十六进制字符串
oct(x)	                oct(12)	                                            把一个整数转换为八进制字符串


>>if __name__ == '__main__'

参考：https://blog.csdn.net/yjk13703623757/article/details/77918633

相当于Python模拟的程序入口，Python本身并没有这么规定，这只是一种编码习惯。
由于模块之间相互引用，不同模块可能有这样的定义，而程序入口只有一个。
到底哪个程序入口被选中，这取决于__name__的值。


>>__name__
__name__是内置变量，可用于反映一个包的结构
__name__表示当前模块的名字

如果一个.py文件（模块）被直接运行时，则其没有包结构，其__name__值为__main__，即模块名为__main__

所以，if __name__ == '__main__'的意思是：
    当.py文件被直接运行时，if __name__ == '__main__'之下的代码块将被运行；
    当.py文件以模块形式被导入时，if __name__ == '__main__'之下的代码块不被运行。


>>__main__.py文件与python -m
Python的-m参数用于将一个模块或者包作为一个脚本运行，而__main__.py文件相当于是一个包的“入口程序“。

python xxx.py，直接运行xxx.py文件
python -m xxx.py，把xxx.py当做模块运行

假设我们有一个文件test.py，内容如下：
    import sys

    print('test')
    print(sys.path)

输出结果：
test
['/home/oyjx/MyDocument/oyjx/python learn/workspace/oyjxPythonLearn/oyjx', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-x86_64-linux-gnu', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/home/oyjx/.local/lib/python2.7/site-packages', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/gtk-2.0']

然后以模块的方式运行：
    python -m test.py

输出结果：
test
['', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-x86_64-linux-gnu', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/home/oyjx/.local/lib/python2.7/site-packages', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/gtk-2.0']
/usr/bin/python: No module named test.py

由于输出结果只列出了关键的部分，应该很容易看出他们之间的差异：
    直接运行方式是把test.py文件所在的目录放到了sys.path属性中
    以模块方式运行是把你输入命令的目录（也就是当前工作路径），放到了sys.path属性中。

以模块方式运行还有一个不同的地方：多出了一行No module named test.py的错误。
实际上以模块方式运行时，Python先对test.py执行一遍 import，所以print(sys.path)被成功执行，然后Python才尝试运行run.py模块，但是在path变量中并没有test.py这个模块，所以报错。
正确的运行方式，应该是python -m test。


>>__main__.py的作用（可以在oyjx上层目录执行下面的命令测试）
package
├── __init__.py
└── __main__.py

其中，文件__init__.py的内容：
import sys

print("__init__")
print(sys.path)

其中，文件__main__.py的内容：
import sys

print("__main__")
print(sys.path)

接下来，我们运行这个package，使用python -m package运行，输出结果：
__init__
['', ...]

__main__
['', ...]

使用python package运行，输出结果：
__main__

['package', ...]

总结一下：
当加上-m参数时，Python会把当前工作目录添加到sys.path中；而不加-m时，Python则会把脚本所在目录添加到sys.path中。
当加上-m参数时，Python会先将模块或者包导入，然后再执行。

__main__.py文件是一个包或者目录的入口程序。不管是用python package还是用python -m package运行，__main__.py文件总是被执行。


>>关于open()的mode参数
'r'：读
'w'：写
'a'：追加

'r+' == r+w（可读可写，文件若不存在就报错(IOError)）
'w+' == w+r（可读可写，文件若不存在就创建）
'a+' == a+r（可读可追加，文件若不存在就创建）

对应的，如果是二进制文件，就都加一个b就好啦：
'rb'　'wb' 'ab'　'rb+'　'wb+'　'ab+'

关于r+的坑（with open() ... json ...）：
先读取之后，需要调用seek(0)，然后再写入，即覆盖
参考：https://stackoverflow.com/questions/13949637/how-to-update-json-file-with-python


>>Python字符串拼接
1、's' + 'b'
2、's'.join(['1', 'b'])  # 结果：1sb
3、通过%s
print("information of %s:\nname:%s\nage:%s\nsex:%s" % ('oyjx', 'oyjx', '18', '18'))

print('''
information of %s:
name:%s
age:%s
sex:%s
''' % ('oyjx', 'oyjx', '18', '男'))
4、


>>Python中str()和repr()函数的区别
函数str() 用于将值转化为适于人阅读的形式，而repr() 转化为供解释器读取的形式（如果没有等价的语法，则会发生SyntaxError 异常）， 适合开发和调试阶段使用。
但当我们把一个字符串传给 str() 函数再打印到终端的时候，输出的字符不带引号。而将一个字符串传给 repr() 函数再打印到终端的时候，输出的字符带有引号。


>>Python格式化输出，% 和 format
    参考：https://www.cnblogs.com/fat39/p/7159881.html

>>字符串前加‘r’
在Python的string前面加上‘r’， 是为了告诉编译器这个string是个raw string，不要转意backslash '\' 。 例如，\n 在raw string中，是两个字符，\和n， 而不会转意为换行符。由于正则表达式和 \ 会有冲突，因此，当一个字符串使用了正则表达式后，最好在前面加上'r'。
